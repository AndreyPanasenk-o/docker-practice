#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('docker-practice-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(3030);
app.set('port', port);



/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 *  Check if cassandra DB is reachable and has correct migration
 *  P.S. instead of correct migration in this case just products table existing is checked
 */


try {
  app.products.client.connect((err, result) => {
    console.log("cassandra connected");
  })

  var getAllProducts = 'SELECT * FROM docker_practice.products'

  app.products.client.execute(getAllProducts, [], (err, result) => {
    if (err) {
      console.log("ERROR");
      console.log(err);
      server.close();
      process.exit(1);
    }
    else {
      /**
         * Listen on provided port, on all network interfaces.
         */
      console.log("cassandra is OK");
      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);
    }
  });
}
catch (ex) {
  throw ex;
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}